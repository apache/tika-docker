# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build Docker images

on:
  # Allow manual runs.
  workflow_dispatch:
    inputs:
      TIKA_VERSION:
        description: The Tika version to build the image from
        type: string
        default: 2.8.0
      PUSH_IMAGE:
        description: Push image to registry
        type: boolean
        default: true

env:
  # Further platforms can be specified here as long as the base image supports them
  PLATFORMS: linux/arm/v7,linux/arm64/v8,linux/amd64
  IMAGE_NAME: tika
  EXPECTED_USER: "35002:35002"

jobs:
  build-image:
    name: Build Tika v${{ inputs.TIKA_VERSION }} ${{ matrix.IMAGE_TYPE }} Docker images
    runs-on: ubuntu-latest

    # This will build both full and minimal images with each run of the workflow
    strategy:
      matrix:
        IMAGE_TYPE: ["full", "minimal"]

    env:
      TEST_CONTAINER_NAME: tika-${{ matrix.IMAGE_TYPE }}-test

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # QEMU and BuildX are required for multi-architecture support
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2

      # Further registries to push the images to can be specified here
      - name: Login to DockerHub
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      # This action will generate the image names, tags and OCI compliant labels
      # https://github.com/docker/metadata-action
      - name: Set container image metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          # Image names
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }}
          # Image tags
          tags: |
            type=raw,v${{ inputs.TIKA_VERSION }}
            type=raw,latest
            type=ref,event=tag

      - name: Build ${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }} image
        uses: docker/build-push-action@v4
        with:
          file: ${{ matrix.IMAGE_TYPE }}/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }}:test
          push: false
          load: true
          build-args: TIKA_VERSION=${{ inputs.TIKA_VERSION }}

      - name: Run ${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }} test container
        run: |
          docker run -d --name "${{ env.TEST_CONTAINER_NAME }}" -p 127.0.0.1:9998:9998 ${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }}:test
          sleep 10

      - name: Verify service is available
        run: |
          url=http://localhost:9998/
          curl --head --location --connect-timeout 5 --silent --output /dev/null ${url} --fail-with-body

      - name: Verify service is running as correct user
        run: |
          user=$(docker inspect "${{ env.TEST_CONTAINER_NAME }}" --format '{{.Config.User}}')
          if [[ $user != ${{ env.EXPECTED_USER }} ]]; then
              echo "Tika service running as user ${user}; expected ${{ env.EXPECTED_USER }}!"
              exit 1
          fi
             
      - name: Push ${{ env.IMAGE_NAME }}-${{ matrix.IMAGE_TYPE }} image
        uses: docker/build-push-action@v4
        with:
          file: ${{ matrix.IMAGE_TYPE }}/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ inputs.PUSH_IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: TIKA_VERSION=${{ inputs.TIKA_VERSION }}
